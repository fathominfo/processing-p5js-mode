0015 (1.5)
X remove json as a file type to display in editor
X   otherwise it's not added to the data folder, which is inconsistent

linting changes
X update to JSHint 2.13.4
X turn off lint for using dot syntax
X   too confusing, and will be removed in jshint soon too
X add DOCTYPE declaration to template index.html
X   https://github.com/processing/processing4/issues/465
X allow users to skip semicolons
X   https://github.com/fathominfo/processing-p5js-mode/issues/25

temp files
X still a lot of temp files left around?
X   instead of doing temp files, should that be state stored by the server?
X     if there's a 'temp' version of a particular file, use that when requested
X     or just send the contents of the editor tabs when requested?
X   write the temp stuff to another folder?
X   positive part of temp files: not having to save between runs
X   save the temp stuff to a different folder entirely?
o when using p5jsMode, just require that sketches are saved
o   too many problems with unsaved code not working properly
o   (instead of doing the weird tricks with temp files)
X   this is a headache; let's not require it
X change to loading modified files dynamically at the server level


_ creates own sketch.properties, check on possible conflicts w/ Base.java

_ make it possible for the main class to be something besides the default name
_   want to use sketch.js (this is a fine restriction)
_   how difficult to have modes determine whether a sketch is a sketch?
_     so that the main sketch class doesn't have to follow a naming convention
_   Mode.rebuildSketchbookTree() handles creation of the sketchbook menu
_   which calls Base.addSketches() to do the actual adding
_   would need some means of specifying what the 'main' file is
_     at least with p5js we could provisionally just use sketch.js?

_ or need better solution when opening sketch.js files
_   just rename the sketch.js file itself
_   https://github.com/fathominfo/processing-p5js-mode/issues/14
_   This needs to be handled by an “Import” tool that pulls
_   from a local folder or from the online editor.
_   in particular, because the index.html might have just about anything

_ ability to run sketches that require SSL
o   using SSL from inside p5jsMode?
o     https://stackoverflow.com/questions/2308479/simple-java-https-server
X     just not a good option: ip addresses don't work well
_   better option would be sftp or github pages integration

_ if starting a new sketch, must reload the browser first?
_   what's happening here? concerned about code mods not updating
_   set no cache on returned objects?

_ when sketch is moved while the editor is open
_   it can't re-create any of the supporting files
_   leaving you with a broken sketch, which is messy b/c it looks ok

_ how to enable the cdn version of p5.min.js
_   would be nice to use by default, but want to avoid net connection as requirement
_     (i.e. if you're using a network connection, why not use an online editor)
_   or is there a way to handle it inside the p5js server?
_   just have a preference/checkbox in the menu
_     enabling the cdn will remove p5.min.js from the sketch
_     new sketches inherit the last setting

_ other import library changes
_   it's actually 'add library' not 'import' in this case
_   probably need a way to *remove* the libraries too
_   get contributed libraries working?

_ refactor library imports in p5
_   properly refactor rebuildLibraryList() and the isCompatible() code
_     which is currently only found in ExampleContribution, but should be
_     implemented in a more general way for the other contribs
_     clean up the static stuff since it's not just Examples
_   Library.discover(File) is static and expects .jar files
_     even once that's fixed, need to make sure js libs don't show up w/ Java
_     meaning that there needs to be other ironing in there

_ better means of understanding actual use of p5jsMode?
_   shows as installed on 30% of machines using the manager

_ mode option for showing html and css or not
_   might be nice to hide these for beginners who will never modify them
_   is it time to add Mode preferences?
_ other supported types from old/offline p5js editor
_   txt, html, css, js, json, scss, xml, csv, less
_   include: html, css, js, scss, less
_   exclude: xml, txt, csv, json (like to be in data folder)
_ add basic syntax highlighting for css


. . .

roll the version/revision numbers in mode.properties

# update the release in mode.properties (it'll match the rev number here)
git tag -a release-1.0 -m '1.0 final'
git tag -a v1.0.1 -m 'version 1.0.1'
git tag -a v1.0.2 -m 'version 1.0.2'
git tag -a v1.0.3 -m 'version 1.0.3'
git tag -a v1.0.4 -m 'version 1.0.4'
git tag -a v1.1 -m 'version 1.1'
git tag -a v1.1.1 -m 'version 1.1.1'
git tag -a v1.2 -m 'version 1.2'
git tag -a v1.2.1 -m 'version 1.2.1'
git tag -a v1.2.2 -m 'version 1.2.2'
git tag -a v1.3 -m 'version 1.3'
git tag -a v1.3.1 -m 'version 1.3.1'
git tag -a v1.4 -m 'version 1.4'
git tag -a v1.4.1 -m 'version 1.4.1'
git tag -a v1.4.2 -m 'version 1.4.2'
git push origin --tags

# delete the previous 'latest'
git tag -d latest
git push origin :refs/tags/latest

# create new 'latest' tag with the current state of the repo
git tag -f -a latest -m 'version 1.4.2'
# actually update things
git push -f --tags

ant dist
then upload dist/p5jsMode.zip and dist/p5jsMode.txt to the 'latest' tag
(can also upload them to the v1.3 tag for anyone installing manually)
and name/put some info about the release into the tag
https://github.com/fathominfo/processing-p5js-mode/releases
