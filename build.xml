<project name="p5js-mode" default="install">

  <property file="local.properties" />

  <condition property="props.present">
    <available file="local.properties" />
  </condition>

  <fail unless="props.present"
        message=" ${line.separator}Missing file.
${line.separator}Create a file named local.properties,
${line.separator}and write a line that reads:
${line.separator}processing.dir=/path/to/processing-git
${line.separator}with the path to where you have the code for processing checked out
${line.separator}and another line that reads:
${line.separator}sketchbook.dir=/path/to/your/sketchbook" />

  <property name="me" value="p5jsMode" />

  <property name="install.dir"
            value="${sketchbook.dir}/modes/${me}" />

  <property name="jar.path"
            value="mode/${me}.jar" />

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="build">
    <mkdir dir="bin" />
    <javac source="17"
           target="17"
           encoding="UTF-8"
           includeAntRuntime="false"
           debug="true"
           srcdir="src"
           destdir="bin"
           classpath="${processing.dir}/core/bin;
                      ${processing.dir}/app/bin;
                      ${processing.dir}/java/bin;
                      mode/nashorn-core.jar;
                      mode/asm.jar;
                      mode/asm-commons.jar;
                      mode/asm-tree.jar;
                      mode/asm-util"
           nowarn="false">
    </javac>

    <jar destfile="${jar.path}">
      <fileset dir="bin" />
    </jar>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="install" depends="build">
    <available file="examples" property="examples.exist" />
    <fail unless="examples.exist" message="First run the 'ant examples' target to get the examples folder ready." />

    <copy todir="${install.dir}/examples">
      <fileset dir="examples" />
    </copy>

    <copy todir="${install.dir}/libraries">
      <fileset dir="libraries" />
    </copy>

    <copy todir="${install.dir}/mode">
      <fileset dir="mode" />
    </copy>

    <copy todir="${install.dir}/template">
      <fileset dir="template" />
    </copy>

    <copy todir="${install.dir}">
      <fileset file="mode.properties" />
      <fileset file="jshint.js" />
      <fileset file="keywords.txt" />
    </copy>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="examples" depends="build">
    <delete dir="examples" />
    <!-- necessary to fork otherwise runs headless and freaks out about
         java.lang.Error: Cannot load com.apple.laf.AquaLookAndFeel
         and also complains about permissions to exit the VM [fry 220308] -->
    <java fork="true"
          classname="processing.mode.p5js.build.ImportExamples"
          classpath="bin;
                     ${processing.dir}/core/bin;
                     ${processing.dir}/app/bin;
                     ${processing.dir}/app/lib/jna.jar;
                     ${processing.dir}/app/lib/jna-platform.jar">
      <!--
      <permissions>
        <grant class="java.security.AllPermission"/>
      </permissions>
      -->
    </java>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="clean">
    <delete dir="${install.dir}" />
    <delete dir="bin" />
    <delete file="${jar.path}" />
    <delete file="${me}.zip" />
    <delete file="${me}.txt" />
  </target>

  <target name="clean-examples">
    <delete dir="examples" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="dist" depends="revision-check, build">
    <mkdir dir="dist" />
    <zip destfile="dist/${me}.zip">
      <!-- This can probably be done more efficiently, no? How about a PR? -->
      <zipfileset dir="." prefix="p5jsMode" includes="examples/**" />
      <zipfileset dir="." prefix="p5jsMode" includes="jshint.js" />
      <zipfileset dir="." prefix="p5jsMode" includes="keywords.txt" />
      <zipfileset dir="." prefix="p5jsMode" includes="libraries/**" />
      <zipfileset dir="." prefix="p5jsMode" includes="mode/**" />
      <zipfileset dir="." prefix="p5jsMode" includes="mode.properties" />
      <zipfileset dir="." prefix="p5jsMode" includes="template/**" />
    </zip>
    <copy file="mode.properties" tofile="dist/${me}.txt" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="revision-check">
    <!-- figure out the revision number -->
    <loadfile srcfile="todo.txt" property="revision">
      <filterchain>
        <headfilter lines="1"/>
        <tokenfilter>
          <stringtokenizer suppressdelims="true" />
          <!-- remove the preceding zeroes -->
          <containsregex pattern="\d\d\d\d" />
        </tokenfilter>
      </filterchain>
    </loadfile>
    <!-- <echo message="revision is ${revision}." /> -->

    <!-- figure out the revision number in mode.properties -->
    <loadfile srcfile="mode.properties"
              property="revision.base">
      <filterchain>
        <tokenfilter>
          <stringtokenizer suppressdelims="true" />
          <containsregex pattern="version="/>
          <replaceregex pattern="\D*" replace=""/>
        </tokenfilter>
      </filterchain>
    </loadfile>
    <!-- <echo message="base revision is ${revision.base}." /> -->

    <condition property="revision.correct">
      <contains string="${revision}" substring="${revision.base}"/>
    </condition>

    <!-- the revision.base property won't be set
         if $revision wasn't found... -->
    <fail unless="revision.correct"
          message="Fix revision number in mode.properties, it should be ${revision}" />
  </target>

</project>
